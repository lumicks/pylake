Pylake 1.2.0
============

.. only:: html

Here's a sneak peak at some of the highlights from the upcoming Pylake `v1.2.0` release...

Correctly use the minimum observable time in dwell time analysis
----------------------------------------------------------------

In earlier versions of Pylake, binding time analysis would return biased estimates when analyzing kymographs with very few events.
This was because `KymoTrackGroup.fit_binding_times()` relied on the assumption that the shortest track in the `KymoTrackGroup` represented the minimum observable dwell time.
This assumption is likely valid for kymographs with many tracks but problematic when few events occur per kymograph. In this case, binding times will be underestimated.
For more information see the :doc:`changelog</changelog>`.

.. important::

    The old (incorrect) behavior is maintained as default until the next major release (`v2.0.0`) to ensure
    backward compatibility. To enable the fixed behavior, specify `observed_minimum=False` when calling
    `KymoTrackGroup.fit_binding_times()`.

    Note that CSVs exported from the kymotracker widget  before `v1.2.0` will contain insufficient metadata
    to make use of the improved analysis. To create this metadata, use `lk.filter_tracks()` on the group with a specified `min_length` before further analysis.

Generate colormaps according to emission wavelength
---------------------------------------------------

By default, single-channel images arising from fluorophores excited with the red, green, and blue lasers
are plotted with the corresponding `lk.colormaps.red`, `lk.colormaps.green`, and `lk.colormaps.blue`
colormaps, respectively. However, the actual light emitted is always red-shifted from the excitation color.
Now you can plot single-channel images with the approximate color of the signal emitted based on the
emission wavelength using the `from_wavelength()` method of :data:`~lumicks.pylake.colormaps`.

.. figure:: wavelength_cmaps.png

    Kymographs showing tracks in three color channels using the default colormaps (left) and colormaps
    corresponding to the actual emission colors (right).

Cropping h5 files
-----------------

You can now use `File.save_as(crop_time_range=(start_timestamp, stop_timestamp))` to export a specific time range to a new `h5` file.
This can be useful for when you want to export a specific part of the timeline or a partial kymograph for instance.
Exporting a partial file helps keep file size down and makes it easier to share only the relevant parts of your data with others.
